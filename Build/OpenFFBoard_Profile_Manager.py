import time
import psutil
import os
import subprocess  # Import to manage restarting programs
import json
import sys
import ctypes
import threading
import base64
from datetime import datetime
from pystray import Icon, Menu, MenuItem
from PIL import Image, ImageDraw
from io import BytesIO

LOG_FILE = "Activity.log"
last_updated_by = None  # Tracks which program last updated profiles.json
profiles_json_mtime = None  # Tracks the last modified time of profiles.json
last_logged_line = ""   # Store last logged line to prevent duplicate writes
no_target_detected_counter = 0  # Tracks how many times this condition is met
max_retry_logs = 5  # Maximum times to log "No target processes detected"
monitored_process = "OpenFFBoard.exe"  # The process you want to monitor and restart
base_dir = "Profile Manager"  # Define the base directory
profiles_dir = os.path.join(base_dir, "Profiles")  # Path to the Profiles folder inside the base directory
last_detected_programs = set()  # This will store the names of programs we've already processed
started_flag = False


def log_activity(message, force=False):
    """Logs activity with a timestamp to the console and a log file. Prevents redundant logs unless force is True."""
    global last_logged_line
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_message = f"[{timestamp}] {message}"

    # Prevent redundant log entries
    if not force and log_message == last_logged_line:
        return  # Avoid redundant log entries

    # Print to console
    print(log_message)

    # Write to log file
    with open(LOG_FILE, 'a') as log_file:
        log_file.write(log_message + "\n")

    # Update the last logged line to prevent future duplicates
    last_logged_line = log_message

# Function to load profile mapping from the JSON config file
def load_profile_mapping():
    CONFIG_DIR = "Profile Manager"
    CONFIG_FILE = os.path.join(CONFIG_DIR, "config.json")
    
    try:
        os.makedirs(CONFIG_DIR, exist_ok=True)
        log_activity(f"Checking configuration folder: {CONFIG_DIR}")
        
        if not os.path.exists(CONFIG_FILE):
            default_mapping  = {
                "iracingui.exe": "iRacing.txt",
                "acs.exe": "Assetto Corsa.txt",
                "acc.exe": "Assetto Corsa Competizione.txt",
                "ace.exe": "Assetto Corsa Evo.txt",
                "wrc.exe": "WRC.txt",
                "dirtrally2.exe": "Dirt Rally 2.txt",
                "beamng.drive.x64.exe": "BeamNG Drive.txt",
                "wreckfest_x64.exe": "Wreckfest.txt",
                "Le Mans Ultimate.exe": "Le Mans Ultimate.txt",
                "eurotrucks2.exe": "EU & AM Truck Simulator.txt",
                "amtrucks.exe": "EU & AM Truck Simulator.txt",
            }
            with open(CONFIG_FILE, 'w') as file:
                json.dump(default_mapping, file, indent=4)
            log_activity(f"Created default configuration file: {CONFIG_FILE}")

        with open(CONFIG_FILE, 'r') as file:
            profile_program_mapping = json.load(file)
        log_activity(f"Loaded profile mapping: {profile_program_mapping}")  # Log the mapping
        return profile_program_mapping
    
    except Exception as e:
        log_activity(f"Error loading configuration: {e}")
        return {}
        
profile_program_mapping = load_profile_mapping()
        
def get_icon_from_base64(base64_string):
    """Converts a base64 string back to an image."""
    image_data = base64.b64decode(base64_string)
    return Image.open(BytesIO(image_data))

def setup_tray():
    """Sets up the system tray icon with a custom image."""
    menu = Menu(MenuItem('Exit', on_exit))
    
    # Base64-encoded icon (the one printed from the previous script)
    base64_icon = ''  # Replace with the base64 string you obtained
    
    # Load the icon from the base64 string
    icon_image = get_icon_from_base64(base64_icon)
    
    # Create the tray icon with the custom image
    icon = Icon('Profile Manager', icon_image, menu=menu)
    return icon
    
def on_exit(icon, item):
    """Handles exiting the application from the tray."""
    log_activity("Exiting via system tray.")
    icon.stop()
    os._exit(0)
    
def reset_log_file():
    """Clears the contents of the activity log at startup."""
    with open(LOG_FILE, 'w') as log_file:
        log_file.write("")  # Overwrite with an empty file
    log_activity("Starting OpenFFBoard Profile Manager")

def show_message_box(title, message):
    """Displays a message box (Windows only) with an OK button."""
    ctypes.windll.user32.MessageBoxW(0, message, title, 0)

def verify_openffboard_existence():
    # Change to the directory of the executable/script
    os.chdir(os.path.dirname(sys.executable if hasattr(sys, '_MEIPASS') else __file__))
    
    # Log the current working directory
    current_directory = os.getcwd()
    
    # Check for OpenFFBoard.exe
    openffboard_path = os.path.join(current_directory, "OpenFFBoard.exe")
    if not os.path.exists(openffboard_path):
        error_message = (
            "Error: OpenFFBoard.exe not found in the current directory.\n\n"
            "Please ensure that OpenFFBoard Configurator is located in the same folder as this program."
        )
        show_message_box("File Not Found", error_message)
        sys.exit(1)

def is_process_running(target_processes):
    """Checks if any of the target processes are running and returns the full name of the first one found."""
    for process in psutil.process_iter(['name']):
        try:
            process_name = process.info['name']
            if process_name and process_name.lower() in (name.lower() for name in target_processes):
                return process_name  # Return full name (including .exe)
        except psutil.NoSuchProcess:
            continue
    return None
        
def create_profile_file_if_missing(program_name):
    # Use the globally defined profiles_dir, no need to redefine it
    profile_filename = get_profile_file(program_name)
    
    if profile_filename:
        profile_path = os.path.join(profiles_dir, profile_filename)  # Use the global profiles_dir here
        log_activity(f"Checking profile path: {profile_path}")  # Log the profile path
        
        # Define profile_name from the profile_filename (without extension)
        profile_name = os.path.splitext(profile_filename)[0] if profile_filename else "Unknown Profile"
        
        if not os.path.exists(profile_path):

            
            # Define the profile data (like "Default" and "New" profiles)
            json_content = {
                "release": 2,
                "global": {
                    "language": "en_US",
                    "donotnotify_updates": False
                },
                "profiles": [
                    {
                        "name": profile_name,
                        "data": [
                            {"fullname": "Effects", "cls": "fx", "instance": 0, "cmd": "filterCfFreq", "value": 200},
                            {"fullname": "Effects", "cls": "fx", "instance": 0, "cmd": "filterCfQ", "value": 60},
                            {"fullname": "Effects", "cls": "fx", "instance": 0, "cmd": "spring", "value": 0},
                            {"fullname": "Effects", "cls": "fx", "instance": 0, "cmd": "friction", "value": 0},
                            {"fullname": "Effects", "cls": "fx", "instance": 0, "cmd": "damper", "value": 0},
                            {"fullname": "Effects", "cls": "fx", "instance": 0, "cmd": "inertia", "value": 0},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "power", "value": 14023},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "degrees", "value": 900},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "fxratio", "value": 204},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "esgain", "value": 127},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "idlespring", "value": 127},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "axisdamper", "value": 0},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "axisfriction", "value": 0},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "axisinertia", "value": 0}
                        ]
                    },
                    {
                        "name": "New",
                        "data": [
                            {"fullname": "Effects", "cls": "fx", "instance": 0, "cmd": "filterCfFreq", "value": 200},
                            {"fullname": "Effects", "cls": "fx", "instance": 0, "cmd": "filterCfQ", "value": 60},
                            {"fullname": "Effects", "cls": "fx", "instance": 0, "cmd": "spring", "value": 0},
                            {"fullname": "Effects", "cls": "fx", "instance": 0, "cmd": "friction", "value": 0},
                            {"fullname": "Effects", "cls": "fx", "instance": 0, "cmd": "damper", "value": 0},
                            {"fullname": "Effects", "cls": "fx", "instance": 0, "cmd": "inertia", "value": 0},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "power", "value": 14023},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "degrees", "value": 900},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "fxratio", "value": 204},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "esgain", "value": 127},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "idlespring", "value": 127},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "axisdamper", "value": 0},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "axisfriction", "value": 0},
                            {"fullname": "Axis", "cls": "axis", "instance": 0, "cmd": "axisinertia", "value": 0}
                        ]
                    }
                ]
            }
            
            log_activity(f"Program {program_name} detected. Creating profile file: {profile_filename}")
            try:
                os.makedirs(profiles_dir, exist_ok=True)  # Ensure the Profiles directory exists
                with open(profile_path, 'w') as f:
                    json.dump(json_content, f, separators=(',', ':'), ensure_ascii=False)  # No indentation or extra spaces
                log_activity(f"Successfully created profile for {program_name}: {profile_filename}")
            except Exception as e:
                log_activity(f"Failed to create profile {profile_filename} due to: {e}")

          
def get_profile_file(program_name):
    """Gets the profile file for a given program name."""
    profile_file = profile_program_mapping.get(program_name.lower())
    return profile_file
          
          
def read_file_content(filename):
    # Ensure that filename is passed properly and is valid
    file_path = os.path.join(filename)  # Construct full file path

    try:
        with open(file_path, 'r') as f:
            content = f.read()
        log_activity(f"Successfully read profile content from: {file_path}")
        return content
    except FileNotFoundError:
        log_activity(f"Profile file '{filename}' not found in directory '{profiles_dir}'.")
        return None

def load_to_profiles_config(content, program_name):
    """Overwrites the 'profiles.json' file with the provided content."""
    global last_updated_by, profiles_json_mtime
    program_name_with_extension = program_name.lower()
    profile_file = profile_program_mapping.get(program_name_with_extension)  
    
    # Extract profile name or fallback to "Unknown Profile"
    profile_name = os.path.splitext(profile_file)[0] if profile_file else "Unknown Profile"
    
    path = "profiles.json"
    try:
        with open(path, 'w') as f:
            f.write(content)
        last_updated_by = program_name_with_extension  # Track in lowercase
        profiles_json_mtime = os.path.getmtime(path)  # Update the modification time
        log_activity(f"Loaded the Profile for {profile_name}.", force=True)
    except Exception as e:
        log_activity(f"Failed to save to profiles.json due to: {str(e)}", force=True)
          
def start_process(process_name):
    """Starts a specific process if it is not already running."""
    try:
        # Check if the process is running
        if not is_process_running([process_name]):
            log_activity(f"{process_name} is not running. Starting the process...")
            subprocess.Popen([process_name], shell=False)
            time.sleep(2)  # Wait a moment to ensure the process has started
            if is_process_running([process_name]):
                log_activity(f"{process_name} started successfully.")
            else:
                log_activity(f"Failed to start {process_name}.")
        else:
            log_activity(f"{process_name} is already running.")
    except Exception as e:
        log_activity(f"Failed to start {process_name} due to: {e}")

def restart_process(process_name):
    """Restarts a specific process."""
    try:
        process_name_cleaned = os.path.splitext(process_name)[0]  # Strip ".exe"
        # Terminate the process if running
        log_activity(f"Checking if {process_name_cleaned} is running...")
        for proc in psutil.process_iter(['name']):
            if proc.info['name'].lower() == process_name.lower():
                log_activity(f"Terminating {process_name_cleaned}...")
                proc.kill()

        # Restart the process
        log_activity(f"Restarting {process_name_cleaned}...")
        subprocess.Popen([process_name], shell=False)

        # Verify the process is running
        time.sleep(2)
        if is_process_running([process_name]):
            log_activity(f"{process_name_cleaned} restarted successfully.")
        else:
            log_activity(f"Failed to restart {process_name_cleaned}.")
    except Exception as e:
        log_activity(f"Failed to restart {process_name}: {e}")

def save_loaded_profiles(content, program_name):
    """Saves the loaded profile to the corresponding program's profile file."""
    global last_updated_by

    program_name_with_extension = program_name.lower()
    profile_file = profile_program_mapping.get(program_name_with_extension)

    # Check if there is an active program and a corresponding profile file
    if profile_file:
        profile_name = os.path.splitext(profile_file)[0]  # Extract profile name
        profile_path = os.path.join(profiles_dir, profile_file)  # Construct profile file path

        # Log the profile path to ensure it's correct
        try:
            with open(profile_path, 'w') as f:
                f.write(content)  # Save the profile content to the program's file
            log_activity(f"Saved profile content {profile_name} profile to {profile_path}")  # Log the successful save

            # Update last_updated_by to track the last program that saved
            last_updated_by = program_name_with_extension
        except Exception as e:
            log_activity(f"Failed to save profile for {program_name}: {str(e)}")
    else:
        log_activity(f"Error: No profile file found for program: {program_name}")

                 
                    
                    
if __name__ == "__main__":
    # Check for OpenFFBoard.exe existence
    verify_openffboard_existence()
    
    # Resetting the log file
    reset_log_file()
    
    tray_icon = setup_tray()
    
    # Start tray icon in a separate thread
    tray_icon_thread = threading.Thread(target=tray_icon.run, daemon=True)
    tray_icon_thread.start()

    # Variable to store the last active detected process
    last_active_process = None

    while True:
        if not started_flag:
            Start_message = "Profile Manager has successfully started"
            show_message_box("OpenFFBoard Profile Manager", Start_message)
            started_flag = True  # Set the flag to True to prevent the message from showing again

        try:
            detected_process = is_process_running(profile_program_mapping.keys())

            if detected_process is not None:
                # Process new detections
                if detected_process.lower() not in last_detected_programs:
                    log_activity(f"New program detected: {detected_process}. Creating profile file if missing.")
                    create_profile_file_if_missing(detected_process)
                    last_detected_programs.add(detected_process.lower())

                normalized_process_name = detected_process.lower()
                if last_updated_by != normalized_process_name:
                    profile_file = get_profile_file(normalized_process_name)
                    if profile_file:
                        profile_content = read_file_content(os.path.join(profiles_dir, profile_file))
                        if profile_content is not None:
                            load_to_profiles_config(profile_content, detected_process)

                        # Restart monitored process if necessary
                        if is_process_running([monitored_process]):
                            restart_process(monitored_process)
                        start_process(monitored_process)

                # Update last active process
                last_active_process = detected_process
                no_target_detected_counter = 0
            
            else:
                # Handle case when no processes are detected
                no_target_detected_counter += 1
                if no_target_detected_counter <= 4:
                    log_activity("No target processes detected. Retrying in 30 seconds...")
                elif no_target_detected_counter == 5:  # Log the final message after 5 attempts
                    log_activity("No target processes detected. Suppressing further logs.")

            # Always check for profiles.json updates
            if profiles_json_mtime is None:
                profiles_json_mtime = os.path.getmtime("profiles.json")
            else:
                current_mtime = os.path.getmtime("profiles.json")
                if current_mtime > profiles_json_mtime:
                    with open("profiles.json", 'r') as f:
                        profiles_content = f.read()
                    
                    # Handle profile saving based on last active process when no process is detected
                    target_process = detected_process or last_active_process
                    profile_name = os.path.splitext(profile_file)[0]  # Extract profile name
                    if target_process:
                        profile_file = get_profile_file(target_process)
                        if profile_file:
                            log_activity(f"Updated {profile_name} profile")
                            save_loaded_profiles(profiles_content, target_process)
                    else:
                        log_activity("No valid process found to save profiles. Skipping save.")

                    profiles_json_mtime = current_mtime

        except Exception as e:
            log_activity(f"An error occurred: {e}")

        # Sleep for 30 seconds when no target process is detected
        if detected_process is None:
            time.sleep(30)
        else:
            time.sleep(1)
